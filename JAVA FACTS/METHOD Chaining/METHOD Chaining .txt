### 🚀 What is *method chaining* in Java?

> **Short answer:** Calling several methods one after another *in a single line* because **each method returns an object reference** (often `this` or a *new* object).

```java
Result r = calculator.add(5).subtract(2).multiply(3).build();
```

Here, every call hands back an object, letting the next dot connect immediately.

---

## 1. How Java makes the chain work

| Step | What happens inside the JVM                                                   | Where it lives                |
| ---- | ----------------------------------------------------------------------------- | ----------------------------- |
| 1    | **Load** the class (`Calculator`) if it isn’t already in the Method Area.     | Method Area                   |
| 2    | **Create** or reuse an object on the **heap**.                                | Heap                          |
| 3    | **Push** a new stack‑frame for the first method (`add`).                      | Thread Stack                  |
| 4    | `add` finishes → *returns `this`* (the same heap object)                      | Return value on operand stack |
| 5    | JVM immediately **invokes** `subtract` on that returned reference → new frame | Thread Stack                  |
| 6    | Repeat for each dot. Frames pop in reverse order when each call ends.         | Thread Stack                  |
| 7    | Final result stored in a local stack variable (`r`).                          | Thread Stack                  |

*If a method returns a **new** object (e.g., a `Stream` stage) that object is also allocated on the heap before the next call.*

---

## 2. Memory behaviour (easy words)

* **Heap** – the “big cupboard” holding every object made with `new`.
* **Stack** – each thread’s “to‑do pile”; one short‑lived frame per method call.
* **Method chaining** keeps **one** heap object alive (if it returns `this`) while piling and un‑piling small frames on the stack.
* If each link returns **fresh** objects (immutable or lazy APIs), many small heap objects appear – but the previous links become *garbage* as soon as the next dot executes and no reference points to them.

---

## 3. Constructor & flow in a *Builder*‑style chain

```java
public class House {
    private final int rooms;
    private final boolean garden;

    private House(Builder b) {          // <init>
        this.rooms  = b.rooms;
        this.garden = b.garden;
    }
    public static class Builder {
        int rooms;   boolean garden;
        public Builder rooms(int r){ rooms=r; return this; }   // chain link 1
        public Builder garden(boolean g){ garden=g; return this;} // link 2
        public House build(){ return new House(this);}           // terminator
    }
}

House h = new House.Builder()
                .rooms(3)
                .garden(true)
                .build();
```

* **Only one** `Builder` object is on the heap; each setter returns that same object (`this`).
* The final `build()` makes the *real* `House` (second heap allocation).

---

## 4. Real‑world places you meet chaining

| API / Library                  | Typical chain                                        | Why it’s useful           |
| ------------------------------ | ---------------------------------------------------- | ------------------------- |
| **`StringBuilder`**            | `new StringBuilder().append(a).append(b).toString()` | Fast string concatenation |
| **Streams**                    | `list.stream().filter(...).map(...).collect(...)`    | Functional pipelines      |
| **JPA / Hibernate**            | `criteria.select(...).where(...).orderBy(...)`       | Fluent query DSL          |
| **Selenium WebDriver**         | `driver.findElement(...).click().sendKeys(...)`      | Readable test scripts     |
| **Reactive (Reactor, RxJava)** | `flux.map(...).filter(...).subscribe(...)`           | Asynchronous pipelines    |
| **JUnit‑5 Assertions**         | `assertThat(val).isNotNull().isGreaterThan(0)`       | Natural‑language tests    |

---

## 5. Common use cases

1. **Fluent Interfaces** – code reads like English.
2. **Builder Pattern** – avoids telescoping constructors.
3. **Configuration DSLs** – e.g., `HttpClient.newBuilder().version(...).build();`
4. **Query Builders** – SQL, Criteria API, NoSQL drivers.
5. **Immutable transformations** – each link returns a brand‑new value (Streams).

---

## 6. Corner cases & gotchas

| Corner case                   | Why it bites                                                                     | Safe‑guard                                |
| ----------------------------- | -------------------------------------------------------------------------------- | ----------------------------------------- |
| **`null` in the middle**      | `foo.bar().baz()` → if `bar()` returns `null`, `NullPointerException` at `baz()` | Check for `null` or use `Optional`        |
| **Side‑effects hidden**       | Each link may mutate state; chaining hides the steps during debugging            | Keep each call on a new line when tracing |
| **Large chain on one line**   | Hard to set break‑points                                                         | Break naturally or extract variables      |
| **Mixed mutable + immutable** | May allocate many short‑lived objects (e.g., `BigDecimal`)                       | Reuse mutable builders if perf matters    |
| **Thread safety**             | Chained mutators on shared object need external sync                             | Prefer immutability or thread‑local       |

---

## 7. Interview questions that look innocent but aren’t

1. **“Why can `StringBuilder` chain but `String` can’t?”**
   `String` is *immutable*, so `append` would need to alter it → impossible. `StringBuilder` is mutable and returns `this`.

2. **“Does every dot make a new object?”**
   Only if the method returns a *new* instance (Streams, `BigDecimal`) – else it’s the same object.

3. **“Can you chain static methods?”**
   Yes, if each static method returns an object, e.g., `Optional.of(1).map(...).orElse(0)`.

4. **“What happens in bytecode during chaining?”**
   The compiler emits consecutive `invokevirtual` (or `invokestatic`) instructions; each pushes a reference on the operand stack for the next call.

5. **“Compare Builder vs telescoping constructors.”**
   Builder with chaining is readable and flexible; telescoping (`new Cellphone(a,b,c,d)`) becomes unreadable as parameters grow.

---

## 8. JVM view with simplified bytecode (one chain link)

```java
0:   new           #2   // Calculator
3:   dup
4:   invokespecial #3   // <init>
7:   ldc           #4   // int 5
9:   invokevirtual #5   // add(I)LCalculator;
12:  ldc           #6   // int 2
14:  invokevirtual #7   // subtract(I)LCalculator;
17:  astore_1           // store in local var r
```

*Each `invokevirtual` leaves its return reference on the operand stack, ready for the next call.*

---

## 9. Summary table

| Topic               | Key points                                                                          |
| ------------------- | ----------------------------------------------------------------------------------- |
| **Definition**      | Series of method calls where each returns an object reference enabling another call |
| **Typical return**  | `this` (same object) or a new immutable object                                      |
| **Heap impact**     | One object (mutable chain) vs many (immutable chain)                                |
| **Stack impact**    | One lightweight frame per method, popped immediately                                |
| **Main patterns**   | Fluent Interface, Builder, Functional Pipelines                                     |
| **Pros**            | Readability, reduced temp variables, DSL‑like feel                                  |
| **Cons**            | Harder debugging, potential NPEs, hidden allocations                                |
| **JVM actions**     | Load class → allocate object → run method → push return → next invoke               |
| **Interview traps** | Immutability, GC of intermediate values, static chaining, thread safety             |

---

## 10. Real‑time code playground

### A. Mutable chaining (`StringBuilder`)

```java
String story = new StringBuilder()
                   .append("Once ")
                   .append("upon ")
                   .append("a time.")
                   .toString();
```

Only **one** heap object (`StringBuilder`), resized internally.

---

### B. Immutable chaining (`BigDecimal`)

```java
BigDecimal price = BigDecimal.valueOf(100)
                    .add(BigDecimal.valueOf(18))      // GST
                    .multiply(BigDecimal.valueOf(2)); // quantity
```

Each arithmetic call returns a **new** `BigDecimal`, old ones become garbage.

---

### C. Stream pipeline

```java
List<String> names = people.stream()
        .filter(p -> p.getAge() > 18)
        .map(Person::getName)
        .sorted()
        .toList();
```

Every intermediate operation (`filter`, `map`, `sorted`) returns a **new** Stream object (cheap, lazy).

---

### D. Defensive breakpoints

```java
Order order = new Order();
order.addItem("Book")      // breakpoint 1
     .applyDiscount(0.1)   // breakpoint 2
     .checkout();          // breakpoint 3
```

Placing the chain on separate lines helps debugging.

---

## 11. In **very** simple words

> **Method chaining** is like giving **one waiter** several instructions in a row:
> “Bring me water, **then** add ice, **then** add lemon.”
> Because the waiter answers “Sure—here I am” after each step, you keep talking to the *same* waiter without starting a new conversation each time.
Sure! Here's a **Java program** that demonstrates **static method chaining** — where one static method calls another in a **chain-like sequence**.

---

### ✅ **Concept of Static Method Chaining:**

* Static methods **belong to the class**, not objects.
* Chaining is done by **returning the class itself** (or something chainable) from one static method and calling another on it.

---

### ✅ **Java Program: Static Method Chaining**

```java
public class StaticChaining {

    static StaticChaining stepOne() {
        System.out.println("Step 1: Initialized static method");
        return new StaticChaining(); // Return object to chain next
    }

    static StaticChaining stepTwo() {
        System.out.println("Step 2: Processing in static method");
        return new StaticChaining(); // Return object to chain next
    }

    static StaticChaining stepThree() {
        System.out.println("Step 3: Finalizing static method");
        return new StaticChaining();
    }

    public static void main(String[] args) {
        // Chaining static methods
        StaticChaining.stepOne()
                      .stepTwo()
                      .stepThree();
    }
}
```

---

### 🧠 **How it works:**

* Each static method prints a message and returns a new object.
* That returned object is used to call the next static method.
* Though methods are static, they **return the class type** to allow chaining.

---

### 📌 Note:

* Normally, **method chaining** is done using **non-static methods**.
* Static method chaining like this is **less common**, but possible if each static method returns an object or value allowing further chaining.

---

### 🔁 Want to see chaining with **non-static methods**, or memory behavior (heap/stack)?
